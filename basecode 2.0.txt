#include <Wire.h>
#include <MPU6050.h>
#include <Adafruit_PWMServoDriver.h>

// MPU6050 setup
MPU6050 mpu;
int16_t ax, ay, az, gx, gy, gz;

// PCA9685 for servo control
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();

// Servo definitions
#define SERVOMIN  150 // Minimum pulse length count (out of 4096)
#define SERVOMAX  600 // Maximum pulse length count (out of 4096)

// Servo Pins on PCA9685
#define TILT_FRONT_PIN 0
#define TILT_BACK_PIN 1
#define PITCH_FRONT_PIN 2
#define PITCH_BACK_PIN 3

// Servo neutral positions (in ticks, both props face up)
const int NEUTRAL_FRONT_BASE = 390;  // Pitch servo (horizontal base)
const int NEUTRAL_FRONT_TILT = 550;  // Tilt servo (propeller up)
const int NEUTRAL_BACK_BASE = 420;   // Pitch servo (horizontal base)
const int NEUTRAL_BACK_TILT = 580;   // Tilt servo (propeller up)

// PID Constants for stabilization
float kp_pitch = 4.0, ki_pitch = 0.5, kd_pitch = 0.25; // Pitch
float kp_roll = 4.0, ki_roll = 0.5, kd_roll = 0.25;   // Roll
float kp_yaw = 2.0, ki_yaw = 0.2, kd_yaw = 0.1;       // Yaw

float pid_pitch = 0, pid_roll = 0, pid_yaw = 0;
float last_error_pitch = 0, last_error_roll = 0, last_error_yaw = 0;
float integral_pitch = 0, integral_roll = 0, integral_yaw = 0;

// Gyro calibration function
void calibrateGyro() {
  int32_t gx_sum = 0, gy_sum = 0, gz_sum = 0;
  const int samples = 100; // Number of samples to average

  Serial.println("Calibrating gyro, keep the UAV still...");
  delay(500); // Brief delay to ensure stability

  for (int i = 0; i < samples; i++) {
    mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
    gx_sum += gx;
    gy_sum += gy;
    gz_sum += gz;
    delay(10); // Sample every 10ms
  }

  // Calculate average offsets
  float gx_offset = gx_sum / (float)samples;
  float gy_offset = gy_sum / (float)samples;
  float gz_offset = gz_sum / (float)samples;

  // Apply offsets to MPU6050 (divided by 4 due to internal scaling in MPU6050 library)
  mpu.setXGyroOffset(gx_offset / 4);
  mpu.setYGyroOffset(gy_offset / 4);
  mpu.setZGyroOffset(gz_offset / 4);

  Serial.print("Gyro offsets - X: "); Serial.print(gx_offset);
  Serial.print(" Y: "); Serial.print(gy_offset);
  Serial.print(" Z: "); Serial.println(gz_offset);
  Serial.println("Calibration complete.");
}

void setup() {
  Serial.begin(115200);
  Wire.begin();

  // Initialize MPU6050
  mpu.initialize();
  if (!mpu.testConnection()) {
    Serial.println("MPU6050 connection failed");
    while (1);
  }

  // Calibrate gyro
  calibrateGyro();

  // Initialize PCA9685
  pwm.begin();
  pwm.setPWMFreq(50);  // Analog servos run at ~50 Hz updates

  // Set servos to neutral positions (both props up)
  pwm.setPWM(PITCH_FRONT_PIN, 0, NEUTRAL_FRONT_BASE); // Front pitch servo to horizontal
  pwm.setPWM(TILT_FRONT_PIN, 0, NEUTRAL_FRONT_TILT);  // Front tilt servo to prop up
  pwm.setPWM(PITCH_BACK_PIN, 0, NEUTRAL_BACK_BASE);   // Back pitch servo to horizontal
  pwm.setPWM(TILT_BACK_PIN, 0, NEUTRAL_BACK_TILT);    // Back tilt servo to prop up

  delay(1000); // Allow time for servos to reach neutral positions
}

void loop() {
  // Read MPU6050 data
  mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
  
  // Calculate pitch and roll angles from accelerometer data
  float pitch = atan2(ax, sqrt(ay * ay + az * az)) * 180 / M_PI;
  float roll = atan2(ay, sqrt(ax * ax + az * az)) * 180 / M_PI;
  
  // Calculate yaw rate from gyroscope (degrees per second)
  float yaw_rate = gz / 131.0; // MPU6050 default sensitivity: 131 LSB/(deg/s)

  // PID Calculations for stabilization (target is 0 degrees for pitch/roll, 0 deg/s for yaw)
  float error_pitch = 0 - pitch;
  float error_roll = 0 - roll;
  float error_yaw = 0 - yaw_rate;

  integral_pitch += error_pitch;
  integral_roll += error_roll;
  integral_yaw += error_yaw;
  
  float derivative_pitch = error_pitch - last_error_pitch;
  float derivative_roll = error_roll - last_error_roll;
  float derivative_yaw = error_yaw - last_error_yaw;

  pid_pitch = kp_pitch * error_pitch + ki_pitch * integral_pitch + kd_pitch * derivative_pitch;
  pid_roll = kp_roll * error_roll + ki_roll * integral_roll + kd_roll * derivative_roll;
  pid_yaw = kp_yaw * error_yaw + ki_yaw * integral_yaw + kd_yaw * derivative_yaw;

  last_error_pitch = error_pitch;
  last_error_roll = error_roll;
  last_error_yaw = error_yaw;

  // Limit PID output
  pid_pitch = constrain(pid_pitch, -50, 50);
  pid_roll = constrain(pid_roll, -50, 50);
  pid_yaw = constrain(pid_yaw, -50, 50);

  // Adjust servos from neutral positions
  // Tilt servos move together for pitch stabilization
  int tilt_front = NEUTRAL_FRONT_TILT + map(pid_pitch, -50, 50, -100, 100);
  int tilt_back = NEUTRAL_BACK_TILT + map(pid_pitch, -50, 50, -100, 100);

  // Pitch servos combine roll and yaw corrections
  int pitch_front = NEUTRAL_FRONT_BASE + map(pid_roll + pid_yaw, -100, 100, -100, 100);
  int pitch_back = NEUTRAL_BACK_BASE - map(pid_roll - pid_yaw, -100, 100, -100, 100);

  // Constrain to valid range
  tilt_front = constrain(tilt_front, SERVOMIN, SERVOMAX);
  tilt_back = constrain(tilt_back, SERVOMIN, SERVOMAX);
  pitch_front = constrain(pitch_front, SERVOMIN, SERVOMAX);
  pitch_back = constrain(pitch_back, SERVOMIN, SERVOMAX);

  // Apply servo positions using pwm.setPWM
  pwm.setPWM(TILT_FRONT_PIN, 0, tilt_front);
  pwm.setPWM(TILT_BACK_PIN, 0, tilt_back);
  pwm.setPWM(PITCH_FRONT_PIN, 0, pitch_front);
  pwm.setPWM(PITCH_BACK_PIN, 0, pitch_back);

  // Debugging output
  Serial.print("Pitch: "); Serial.print(pitch);
  Serial.print(" Roll: "); Serial.print(roll);
  Serial.print(" Yaw Rate: "); Serial.print(yaw_rate);
  Serial.print(" Tilt Front: "); Serial.print(tilt_front);
  Serial.print(" Tilt Back: "); Serial.print(tilt_back);
  Serial.print(" Pitch Front: "); Serial.print(pitch_front);
  Serial.print(" Pitch Back: "); Serial.println(pitch_back);

  delay(20); // Control loop time (50 Hz)
}
